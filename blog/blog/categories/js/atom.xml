<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JS | War Within Me]]></title>
  <link href="http://warwithinme.com/blog/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://warwithinme.com/blog/"/>
  <updated>2012-03-01T18:51:57+08:00</updated>
  <id>http://warwithinme.com/blog/</id>
  <author>
    <name><![CDATA[WWM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JS检测Image的加载]]></title>
    <link href="http://warwithinme.com/blog/2012/03/javascript-image/"/>
    <updated>2012-03-01T10:54:00+08:00</updated>
    <id>http://warwithinme.com/blog/2012/03/javascript-image</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>页面中所有指向大图的链接，在被点击时不跳转，而是直接显示该大图。为了能尽快可以加载这些大图，它们会在页面完全加载完后，自动预加载。<br/>
JS代码要做的是<strong>点击链接时，需要判断图片是否能立刻显示</strong>。</p>

<h2>Issue</h2>

<h4>Firefox quirkies</h4>

<p>FF里面，一旦一个<code>Image</code>对象加载完成，它的<code>complete</code>属性就变成<code>true</code>，并且一直为<code>true</code>，即使修改<code>src</code>属性去加载另外的图片：
``` javascript
var img = new Image();
img.src = 'loaded_pic.jpg';
console.log(img.complete == true);</p>

<p>img.src = 'not_loaded_pic.jpg';
// 加载没有cache的图片，这里img.complete本来应为false，但FF不重设img的complete属性。
console.log(img.complete == true);
```</p>

<ul>
<li><strong>每次都要用全新的Image对象检测图片是否能立刻显示</strong></li>
</ul>


<h4>Chrome quirkies</h4>

<p>Chrome的<code>complete</code>很飘忽，好难捉摸啊：</p>

<ul>
<li>显示过的图片，<code>complete</code>一定(?)为<code>true</code>。</li>
<li>没Cache的图片，在没加载完成前，<code>complete</code>肯定为<code>false</code> (理所当然嘛)</li>
<li>Cache了的图片就用代码说明好了：</li>
</ul>


<p>``` javascript
imgURL        = 'cached.jpg';    // 缓存图片路径
anotherImgURL = 'cached2.png';   // 另外一个缓存了的图片路径
globalImg     = new Image();     // 全局用预加载器</p>

<p>function onDocReady() // 页面加载完成后调用
{</p>

<pre><code>var preloadImg = new Image();
preloadImg.src = imgURL;           // 第一次请求加载该图片
console.log(preloadImg.complete == false); // 即使缓存了，complete铁定也是false

var preloadImg2 = new Image();
preloadImg2.src = imgURL;          // 立马再请求一次
console.log(preloadImg.complete == false); // 依然是false

globalImg.src = anotherImgURL;     // 用全局的来预加载
</code></pre>

<p>}</p>

<p>function onLinkClick() // 点击某个链接时调用
{</p>

<pre><code>var img = new Image();
img.src = imgURL;
// 之后再加载该图片，complete有可能是true，也可能是false
console.log(img.complete == false || img.complete == true); 

var img2 = new Image();
img2.src = anotherImgURL;
// 用全局的预加载的话，这个一定为true。
console.log(img.complete == true);
</code></pre>

<p>}
```
结论就是：</p>

<ol>
<li>图片的complete属性最起码要在下一次代码调度时才会更改。</li>
<li>如果指向图片A的所有Image对象都被GC，而且这个图片A并没有在页面显示过，则再创建Image对象，将它<code>src</code>设为链接A，它的complete属性要在下次调度时才会变成ture。(将预加载放在一个全局对象里面，它就不被回收)</li>
</ol>

]]></content>
  </entry>
  
</feed>
