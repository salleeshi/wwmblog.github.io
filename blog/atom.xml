<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[War Within Me]]></title>
  <link href="http://warwithinme.com/blog/atom.xml" rel="self"/>
  <link href="http://warwithinme.com/blog/"/>
  <updated>2012-02-23T17:32:37+08:00</updated>
  <id>http://warwithinme.com/blog/</id>
  <author>
    <name><![CDATA[WWM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xVim v0.2 is out]]></title>
    <link href="http://warwithinme.com/blog/2012/02/xvim-v02/"/>
    <updated>2012-02-23T12:26:00+08:00</updated>
    <id>http://warwithinme.com/blog/2012/02/xvim-v02</id>
    <content type="html"><![CDATA[<p>Well, <a href="https://github.com/WarWithinMe/xVim">xVim</a> v0.2 is out. It now supports <strong>Visual Mode</strong>, <em>though some command are still not implemented yet</em>.</p>

<!-- more -->


<h1>What is xVim</h1>

<p>xVim is a <a href="http://www.culater.net/software/SIMBL/SIMBL.php">SIMBL</a> plugin which aims to provide <strong><a href="http://www.vim.org">Vim</a> Key-Binding</strong> for <strong>NSTextView</strong>. So every cocoa app which uses NSTextView can have vim key binding with them. Sounds like crazy, huh?</p>

<h1>What is not xVim</h1>

<p>Any way, the difference between <a href="http://www.vim.org">Vim</a> and <a href="https://github.com/WarWithinMe/xVim">xVim</a> is that, <a href="http://www.vim.org">Vim</a> is an full featured (not-good-looking?) editor, while xVim is just a plugin.<br/>
That is to say, features belonged to editor (e.g. bookmarks, tags, and anything sounds complicated&#8230;=, =) will not be implemented in xVim.</p>

<h1>What app is supported</h1>

<p>Well:</p>

<ul>
<li><strong><a href="https://developer.apple.com/xcode">Xcode</a></strong> (I&#8217;m using 4.2, and I bet other versions will works fine)</li>
<li><a href="http://chocolatapp.com">Chocolat</a></li>
<li><p><a href="http://macrabbit.com/espresso">Espresso</a></p></li>
<li><p>And anything that has <strong>NSTextView</strong> within it.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始用Octopress写Blog]]></title>
    <link href="http://warwithinme.com/blog/2012/02/blogging-with-octopress/"/>
    <updated>2012-02-20T23:45:00+08:00</updated>
    <id>http://warwithinme.com/blog/2012/02/blogging-with-octopress</id>
    <content type="html"><![CDATA[<p>嗯, 貌似用<a href="http://octopress.org/">Octopress</a>的循例是将<strike>初夜</strike>(初篇)献给八爪君的各种触手.
那么我也来写写好了.</p>

<p>很多宅与Hacker都已经<strike>吐槽</strike>(解释)过如何打造自己的触手系博客了. 所以就再也没有必要在这个方面啰嗦啦, 还是说说日常的blog方面吧&#8230;</p>

<!-- more -->


<p>就算千辛万苦搭建好触手君, 写博文也不会立即变得好像抽根烟那么容易哎: <br/>
你要打开termial, 然后输入<code>rake new_post[oo_xx]</code>, 才能下笔.
接着还要各种<code>rake preview</code>来预览, 如果博文太多就需要<code>rake isolate[oo_xx]</code>来提高预览的速度.
最后还要<code>rake deploy</code>来发布.
我好似忘记了说, 新建一篇博文之后, 你还得打开那个目录(别告诉我你就放在桌面!!!), 来寻找那片博文, 这要点击多少次鼠标啊, 我的苍天.</p>

<p>这是彻彻底底违背了宅星人的第一法则 :</p>

<blockquote><p>做事情要能懒则懒 (当然要做好, 不然老板炒鱿鱼就不要来找我寻仇哦)</p><footer><strong>宅星人第一法则</strong> <cite></cite></footer></blockquote>


<p>于是就写了些脚本, 好让写blog能爽快点, 当然光脚本也是绝对不够的, 我们还要请<a href="http://www.alfredapp.com/">alfred君</a>, (quicksilver娘因为傲娇到连我也受不了, 所以决定去和alfred君好), 当然还得为<a href="http://www.alfredapp.com/">alfred君</a>准备他的<a href="http://www.alfredapp.com/powerpack/">powerpack</a>, 不然就什么也做不到了.</p>

<h1>要解决的问题是:</h1>

<p><strong>既然都已经输入 <code>rake new_post[oo_xx]</code>, 为什么都不直接帮我打开, 让我编辑啊, 魂淡.</strong> 而且我还想要立刻就打开这个页面进行预览!!!!</p>

<p><strong>1.</strong>首先修改你的Rakefile, 将<code>task :preview</code>那一段修改成这样 :</p>

<figure class='code'><figcaption><span>task :preview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;preview the site in a web browser&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:preview</span><span class="p">,</span> <span class="ss">:filename</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Starting to watch source with Jekyll and Compass. Starting Rack on port </span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;compass compile --css-dir </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/stylesheets&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/stylesheets/screen.css&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jekyllPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">({</span><span class="s2">&quot;OCTOPRESS_ENV&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;preview&quot;</span><span class="p">},</span> <span class="s2">&quot;jekyll --auto&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">compassPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;compass watch&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rackupPid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;rackup --port </span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:filename</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;sleep 2; open http://localhost:4000/blog</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;INT&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span> <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要就是将<code>task :preview</code>改成<code>task :preview, :filename do |t, args|</code><br/>
然后在里面添加了<code>filename = args[:filename] || ""</code> 和 <code>system "sleep 2; open http://localhost:4000/blog#{filename}"</code> 这样就能在预览的时候直接在浏览器打开blog.</p>

<p><strong>2.</strong>接着去下载这个gist, 放到你存放Rakefile的目录里面. 这个gist的工作是创建文章, 打开文章, 预览文章:</p>

<div><script src='https://gist.github.com/1874539.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
# encoding: utf-8
#
# EDITOR = &quot;subl&quot; is for SublimeText2
# EDITOR = &quot;mvim&quot; is for MacVim
# EDITOR = &quot;mate&quot; is for TextMate
#

require 'rake'

EDITOR   = &quot;subl&quot;
POST_DIR = &quot;/source/_posts&quot;
PREVIEW  = true


# Create new file
new_title = ARGV[0]
rake_new_post = &quot;new_post[\&quot;#{new_title}\&quot;]&quot;
puts &quot;Running: &quot; + rake_new_post
new_result = %x[rake #{rake_new_post}]

# Isolate new file
title_slug   = new_result.split(&quot;/&quot;)
new_post     = title_slug[2].strip

rake_isolate = &quot;isolate[#{new_post}]&quot;
puts &quot;Running: &quot; + rake_isolate
isolate_result = %x[rake #{rake_isolate}]

# Open new file
open_cmd = EDITOR + &quot; &quot; + Dir.pwd + POST_DIR + &quot;/&quot; + new_post
system(open_cmd)

# Preview
if PREVIEW == true then
    puts &quot;Peady to preview...&quot;
    preview_path = &quot;/&quot; + File.basename(new_post, '.*').gsub(&quot;-&quot;, &quot;/&quot;) + &quot;/&quot;
    exec &quot;rake preview[#{preview_path}]&quot;
end
</code></pre></noscript></div>


<p><strong>3.</strong>翻出你的<a href="http://www.alfredapp.com/">alfred君</a>, 添加一个Shell Script Extension:</p>

<ul>
<li>Title : 创建博文</li>
<li>Description: (留空即可)</li>
<li>Keyword : newpost</li>
<li>Options : (<strong>全不选!</strong>)</li>
<li>Advanced : (<strong>同样全部不选!</strong>)</li>
<li>Parameter : 选 &#8220;Required Parameter&#8221;</li>
</ul>


<p>然后Command里面输入 : (当然<code>/Your/Path/To/Rakefile/Folder</code>要换成你存放Rakefile的目录)</p>

<pre><code>cd /Your/Path/To/Rakefile/Folder
./newpost.rb "{query}"
</code></pre>

<p>这样, 准备功夫就完成了. 下面就试试吧 :
翻出<a href="http://www.alfredapp.com/">alfred君</a>, 然后输入<code>newpost my fancy new post</code>(是真的不用双引号哦~), 回车&#8230; <strike>好基友</strike><a href="http://www.sublimetext.com/2">SublimeText2</a>是不是就弹出来让你操纵呢&#8230;</p>

<h4>其他一些问题:</h4>

<ol>
<li><p>如果想用其他编辑器来编辑, 则需要将<code>newpost.rb</code>里面的<code>EDITOR = "subl"</code>换成 :</p>

<ul>
<li><code>EDITOR = "mvim"</code> (换成MacVim)</li>
<li><code>EDITOR = "mate"</code> (换成TextMate)</li>
</ul>
</li>
<li><p>因为博客不是放在根目录里, 只能<code>rake preview</code>的方法来预览, 否则加载的文件的路径都错了&#8230; 可惜目前没找到能让<a href="http://livereload.com/">LiveReload</a>来刷新页面的方法, sign.</p></li>
<li><strong>用了这个脚本, 在准备更新到服务器之前的那次<code>rake generate</code>之前, 必须先<code>rake integrate</code>. 否则只有新建的那个blog文哦.</strong></li>
<li>要用<a href="http://www.sublimetext.com/2">SublimeText2</a>之前还得先在terminal运行一下代码, 这样才能用它的命令行工具:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s <span class="s2">&quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot;</span> /bin/subl
</span></code></pre></td></tr></table></div></figure>


<h1>呼, 好累哎, 睡觉先 =, =</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xVim v0.12]]></title>
    <link href="http://warwithinme.com/blog/2011/12/xvim-0-12/"/>
    <updated>2011-12-24T13:50:00+08:00</updated>
    <id>http://warwithinme.com/blog/2011/12/xvim-0-12</id>
    <content type="html"><![CDATA[<p>So <a href="https://github.com/WarWithinMe/xVim">xVim</a> has updated to 0.12.</p>

<p>Fixed some bugs
Added a little more key binding like (ctrl+u and ctrl+d).
Added a simplified key-mapping feature, so that you can type &#8216;jk&#8217; or other stuff in insert mode to switch back to normal mode.
some motions, % and visual mode are still not implemented.</p>

<p>BTW, xVim is a SIMBL plugin to add vim like key-binding to Xcode and other application that uses NSTextView.</p>

<p>Check it out in <a href="https://github.com/WarWithinMe/xVim">github repo</a></p>

<p>Currently supported are Xcode, espresso and chocalat.</p>

<p>(TextMate does not use NSTextView, so if someone wants to use vim in TextMate, they should use Vico app.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M$的东西怎么这么让人不敢恭维啊。。]]></title>
    <link href="http://warwithinme.com/blog/2011/04/ms-never-make-good-things/"/>
    <updated>2011-04-28T13:50:00+08:00</updated>
    <id>http://warwithinme.com/blog/2011/04/ms-never-make-good-things</id>
    <content type="html"><![CDATA[<p>就拿图形来说。现在M$就有三套图形的API:</p>

<h4>GDI</h4>

<p>倒胃口的是: <code>C API</code>和<code>不支持Alpha</code>
唯一就是<strong>硬件加速</strong>。同时搭配上GDI++(这玩意可不是M$自己出的, 阿鲁)，可以达到Mac的字体渲染效果。</p>

<h4>GDI+</h4>

<p><code>C++ API</code>，<strong>不支持硬件加速</strong>。使用方便，可以图像处理，效率却不高。</p>

<h4>Direct2D</h4>

<p>第三个<strong>Direct2D</strong>(DirectDraw悲催要到墙角画圈圈了&#8230;)，看上去很优秀的:</p>

<ul>
<li>轻便的COM接口，比较易用。</li>
<li>硬件加速的哦, 亲。。</li>
</ul>


<p>可惜硬件加速的是绘图，不是图像处理。。图像处理方面的能力基本上为0。这个是不是因为GPU只懂得vertex之类的东西，而不懂像素的关系呢？
D2D本身没有支持让你直接操作像素数据的API，例如你只是想修改一个像素的值，noway。。当然也不是绝对的，你可以通过WIC来获取那些像素，但是仅仅限于软件渲染的RenderTarget。如果一个RenderTarget是硬件加速的，你就没有办法用WIC来获取这个RenderTarget上面的数据了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在看Why Is Chinese Web Design So Bad]]></title>
    <link href="http://warwithinme.com/blog/2011/03/readin-why-is-chinese-web-design/"/>
    <updated>2011-03-02T13:50:00+08:00</updated>
    <id>http://warwithinme.com/blog/2011/03/readin-why-is-chinese-web-design</id>
    <content type="html"><![CDATA[<p>刚才看到一篇文章<a href="http://thinkvitamin.com/design/why-is-chinese-web-design-so-bad/">Why Is Chinese Web Design So Bad</a>。文章是一个叫Nick Johnson的人在吐槽中国网站设计得<strong>so bad</strong>。
我没仔细看原文这种事情, 我会告诉你么。有看头的其实是那篇文章后面那堆评论。</p>

<p>就算很多人点了<em>like</em>，我也只能说，lovebk的评论超反感啊！看得出愤青的他已经恼羞成怒，结果就语无伦次喷了人家一面。虽然Nick是绝对不会知道他在说啥，因为我也不清楚那个comment的主旨啊。但是，喂，lovebk，你的节操掉了一地，麻烦扫一扫好么。。。Anyway， 正如lovebk所言，Nick确实挺片面的，但是我觉得整篇文章的目的在于探讨那种中国风的设计风格，而不是在谩骂中国的设计师如何的低质。</p>

<p>Nick Johnson说中国的网站设计不好，是说这些网站喜欢整合一切可能的数据在网页上，趋于繁杂。而西方则流行简洁优雅的风格。
但Nick不晓得与资本主义国家不同的是，在中国，这些展现出来的东西，并不都是设计师的思想。它们更多出自于其他领域的人的想法，这些人可以对设计一窍不通，但是最终的产品却都是他们把关，设计师只是在&#8221;工作&#8221;而已。所以说中国这些“丑陋的”网站其实无所谓设计不设计，只要它们成功迎合了中国网民的需求，或者中国网民愿意接受它们的“丑陋的一面”，之后这个网站赚到钱了，成功了。要知道，他们是商人，他们不是设计师，跟他们说你们设计师崇尚的设计观念是行不通的。</p>

<p>设计优雅的中国网站不是没有，但是你未必看得到。能跟从设计师的理念诞生的网站，它本身属于这个设计师。而在中国，很多设计师都没有影响力。因为他们没钱没权力，这个网站没影响力。所以Nick问他周围的人，也只能问出诸如百度，新浪这种网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt与MSVC的中文问题]]></title>
    <link href="http://warwithinme.com/blog/2010/10/qt-msvc-encoding/"/>
    <updated>2010-10-02T15:50:00+08:00</updated>
    <id>http://warwithinme.com/blog/2010/10/qt-msvc-encoding</id>
    <content type="html"><![CDATA[<p>因为之前发布了GCC编译的TwitWar，结果在有些人的xp系统下面出现Runtime Error。主要是调用插件，而这个插件又调用了其他的dll文件。。。然后一直解决不了，最后还是决定用MSVC2008编译。。还好最后结果还不错。。(但是有个同学说他没能加载插件，真悲催。。。)</p>

<p>如果用MSVC2008编译的话，源代码的编码格式是绝对不可以是<strong>UTF-8 without BOM</strong>的。因为该死的MSVC只认<strong>UTF-8 without BOM</strong>。。。如果你保存的编码格式是<strong>UTF-8 with BOM</strong>，那么你用Qt的时候，十有八九会乱码。。</p>

<p>目前我觉得最稳妥的方法是：</p>

<!-- more -->


<ol>
<li>将源代码都保存为<strong>GBK</strong>或<strong>GB2312</strong>。这样编译之后的二进制文件中的字符串就都是这个编码。</li>
<li>凡是源代码中有中文的字符串都用<code>tr()</code>括起来。。例如：<code>tr(“测试中文”)</code>;</li>
<li>在<code>main()</code>函数中，一开始就设置<strong>codec</strong>：</li>
</ol>


<figure class='code'><figcaption><span>设置Codec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">QTextCodec</span><span class="o">*</span> <span class="n">codec</span> <span class="o">=</span> <span class="n">QTextCodec</span><span class="o">::</span><span class="n">codecForName</span><span class="p">(</span><span class="s">&quot;UTF-8&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">QTextCodec</span><span class="o">::</span><span class="n">setCodecForCStrings</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span><span class='line'><span class="n">codec</span> <span class="o">=</span> <span class="n">QTextCodec</span><span class="o">::</span><span class="n">codecForLocale</span><span class="p">();</span>
</span><span class='line'><span class="c1">//codec = QTextCodec::codecForName(&quot;GBK&quot;);//或GB2312</span>
</span><span class='line'><span class="n">QTextCodec</span><span class="o">::</span><span class="n">setCodecForTr</span><span class="p">(</span><span class="n">codec</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里解释一下：</p>

<ol>
<li><p>按常理来说，被注释掉的<code>codec = QTextCodec::codecForName(“GBK”);</code>应该是能工作的。因为源代码是用<strong>GBK</strong>格式保存的。
但是实际上在xp系统下，依然会乱码，只能用<code>codecForLocale()</code>来解决。郁闷的是xp系统的默认编码本来就是<strong>GBK</strong>。</p></li>
<li><p>最后一行设置了用于<code>tr()</code>的编码为<strong>GBK</strong>。这样，被<code>tr()</code>括起来的中文就会被<a href="http://qt.nokia.com/products/">Qt</a>正确转换成Unicode了。</p></li>
<li><p>如果设置了<code>codecForCString</code>为<strong>UTF-8</strong>的话，那么下面的会按<strong>UTF-8</strong>来转换。<code>QString astring = "My little World!";</code> 虽然因为源代码是<strong>GBK</strong>格式，My little World!会以<strong>GBK</strong>格式储存。但是由于<strong>UTF-8</strong>和<strong>GBK</strong>都兼容<strong>ASCII</strong>，就是说那些<strong>ASCII</strong>字符在<strong>UTF-8</strong>和<strong>GBK</strong>里面都是一样的，所以这里不会出错。。</p></li>
<li><p>至于为什么要将<code>CStrings</code>的编码设置成<strong>UTF-8</strong>？因为网络数据。网络数据一般都是<strong>UTF-8</strong>编码的，而<code>codecForCStrings</code>指定的是<code>QByteArray</code>、<code>char*</code>与<code>QString</code>互换的编码。。<br/>
例如，读取<code>QNetworkReply</code>中的数据：</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">QByteArray</span> <span class="n">data</span> <span class="o">=</span> <span class="n">reply</span><span class="o">-&gt;</span><span class="n">readAll</span><span class="p">();</span>
</span><span class='line'><span class="n">QString</span> <span class="n">content</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为<code>data</code>是<strong>UTF-8</strong>格式，所以按上面设置以后content不会乱码。</p>
]]></content>
  </entry>
  
</feed>
